--- gcc-linaro-4.7-2012.12/gcc/config/linux-android.h.bero	2013-01-03 20:39:55.843625931 +0100
+++ gcc-linaro-4.7-2012.12/gcc/config/linux-android.h	2013-01-03 20:40:20.059328679 +0100
@@ -47,7 +47,8 @@
 
 #define ANDROID_CC1PLUS_SPEC						\
   "%{!fexceptions:%{!fno-exceptions: -fno-exceptions}} "		\
-  "%{!frtti:%{!fno-rtti: -fno-rtti}}"
+  "%{!frtti:%{!fno-rtti: -fno-rtti}}"					\
+  "%{!nostdinc: -isystem /system/include/stlport}"
 
 #define ANDROID_LIB_SPEC \
   "%{!static: -ldl}"
--- gcc-linaro-4.7-2012.12/gcc/cp/g++spec.c.bero	2013-01-03 20:40:43.748037236 +0100
+++ gcc-linaro-4.7-2012.12/gcc/cp/g++spec.c	2013-01-03 20:53:42.716591603 +0100
@@ -326,6 +326,17 @@ lang_specific_driver (struct cl_decoded_
 		       CL_DRIVER, &new_decoded_options[j]);
       added_libraries++;
       j++;
+
+      /* For Android targets, we need to add STLport as well */
+      if (OPTION_BIONIC)
+        {
+          generate_option (OPT_l,
+                           "stlport", 1,
+                           CL_DRIVER, &new_decoded_options[j]);
+          added_libraries++;
+          j++;
+        }
+
       /* Add target-dependent static library, if necessary.  */
       if ((static_link || library > 1) && LIBSTDCXX_STATIC != NULL)
 	{
--- gcc-linaro-4.7-2012.12/libgomp/env.c.bero	2013-01-03 20:36:51.015887023 +0100
+++ gcc-linaro-4.7-2012.12/libgomp/env.c	2013-01-03 20:37:06.466697110 +0100
@@ -44,6 +44,9 @@
 #endif
 #include <limits.h>
 #include <errno.h>
+#ifdef __BIONIC__
+# include <asm/page.h>
+#endif
 
 #ifndef HAVE_STRTOULL
 # define strtoull(ptr, eptr, base) strtoul (ptr, eptr, base)
--- gcc-linaro-4.7-2012.12/libitm/config/arm/hwcap.cc.bero	2013-01-03 20:37:52.578142933 +0100
+++ gcc-linaro-4.7-2012.12/libitm/config/arm/hwcap.cc	2013-01-03 20:39:35.144880430 +0100
@@ -40,7 +40,19 @@ int GTM_hwcap HIDDEN = 0
 
 #ifdef __linux__
 #include <unistd.h>
+#ifdef __BIONIC__
+# include <fcntl.h>
+/* copied from glibc elf.h */
+typedef struct
+{
+  uint32_t a_type;
+  union {
+    uint32_t a_val;
+  } a_un;
+} Elf32_auxv_t;
+#else
 #include <sys/fcntl.h>
+#endif
 #include <elf.h>
 
 static void __attribute__((constructor))
--- gcc-linaro-4.7-2012.12/gcc/ada/adaint.c.bero	2013-01-03 21:51:28.736271162 +0100
+++ gcc-linaro-4.7-2012.12/gcc/ada/adaint.c	2013-01-03 21:51:56.500929635 +0100
@@ -88,8 +88,7 @@ extern "C" {
 #include <unixio.h>
 #endif
 
-#ifdef __vxworks
-/* S_IREAD and S_IWRITE are not defined in VxWorks */
+/* S_IREAD and S_IWRITE are not defined in VxWorks and Bionic */
 #ifndef S_IREAD
 #define S_IREAD  (S_IRUSR | S_IRGRP | S_IROTH)
 #endif
@@ -97,7 +96,6 @@ extern "C" {
 #ifndef S_IWRITE
 #define S_IWRITE (S_IWUSR)
 #endif
-#endif
 
 /* We don't have libiberty, so use malloc.  */
 #define xmalloc(S) malloc (S)
--- gcc-linaro-4.7-2012.12/gcc/ada/cio.c.bero	2013-01-03 21:53:30.644782736 +0100
+++ gcc-linaro-4.7-2012.12/gcc/ada/cio.c	2013-01-03 21:55:05.819624130 +0100
@@ -50,9 +50,12 @@ extern "C" {
 #undef putchar
 #undef getchar
 #undef fputc
+/* With Bionic, the defines are needed */
+#ifndef __BIONIC__
 #undef stderr
 #undef stdout
 #endif
+#endif
 
 /* Don't use macros versions of this functions on VxWorks since they cause
    imcompatible changes in some VxWorks versions */
--- gcc-linaro-4.7-2012.12/gcc/ada/cstreams.c.bero	2013-01-03 21:55:38.052239782 +0100
+++ gcc-linaro-4.7-2012.12/gcc/ada/cstreams.c	2013-01-03 21:56:05.931897060 +0100
@@ -54,9 +54,9 @@ extern "C" {
 #include <unixlib.h>
 #endif
 
-#ifdef linux
+#if defined(linux) && !defined(__BIONIC__)
 /* Don't use macros on GNU/Linux since they cause incompatible changes between
-   glibc 2.0 and 2.1 */
+   glibc 2.0 and 2.1. However, they're needed with Bionic */
 
 #ifdef stderr
 #  undef stderr
--- gcc-linaro-4.7-2012.12/gcc/ada/errno.c.bero	2013-01-03 21:56:45.267425593 +0100
+++ gcc-linaro-4.7-2012.12/gcc/ada/errno.c	2013-01-03 21:57:27.283910081 +0100
@@ -59,8 +59,11 @@ __get_errno(void)
   return errno;
 }
 
+/* Bionic has (and exports) __set_errno */
+#ifndef __BIONIC__
 void
 __set_errno(int err)
 {
   errno = err;
 }
+#endif
--- gcc-linaro-4.7-2012.12/gcc/ada/init.c.bero	2013-01-03 21:58:05.541450019 +0100
+++ gcc-linaro-4.7-2012.12/gcc/ada/init.c	2013-01-03 22:00:21.972768337 +0100
@@ -541,7 +541,9 @@ __gnat_install_handler (void)
 #include <signal.h>
 
 #define __USE_GNU 1 /* required to get REG_EIP/RIP from glibc's ucontext.h */
+#ifndef __BIONIC__
 #include <sys/ucontext.h>
+#endif
 
 /* GNU/Linux, which uses glibc, does not define NULL in included
    header files.  */
--- gcc-linaro-4.7-2012.12/gcc/ada/socket.c.bero	2013-01-03 22:01:05.141250301 +0100
+++ gcc-linaro-4.7-2012.12/gcc/ada/socket.c	2013-01-03 22:02:26.076257162 +0100
@@ -33,6 +33,11 @@
 
 #include "gsocket.h"
 
+#ifdef __BIONIC__
+/* for fd_set */
+#include <sys/select.h>
+#endif
+
 #ifdef VMS
 /*
  * For VMS, gsocket.h can't include sockets-related DEC C header files
--- gcc-linaro-4.7-2012.12/gcc/ada/terminals.c.bero	2013-01-03 22:03:05.500782769 +0100
+++ gcc-linaro-4.7-2012.12/gcc/ada/terminals.c	2013-01-03 22:05:03.189337762 +0100
@@ -1015,6 +1015,10 @@ __gnat_setup_winsize (void *desc, int ro
 #   include <sys/stropts.h>
 #endif
 
+#ifndef _POSIX_VDISABLE /* Bionic */
+#define _POSIX_VDISABLE '\0'
+#endif
+
 #define CDISABLE _POSIX_VDISABLE
 
 /* On HP-UX and Sun system, there is a bzero function but with a different
