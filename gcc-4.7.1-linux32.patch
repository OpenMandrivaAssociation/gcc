--- gcc-6.2.0/gcc/config/i386/biarch64.h.linux32~	2016-01-04 15:30:50.000000000 +0100
+++ gcc-6.2.0/gcc/config/i386/biarch64.h	2016-08-23 11:45:49.747855871 +0200
@@ -27,3 +27,11 @@ see the files COPYING3 and COPYING.RUNTI
 
 #define TARGET_64BIT_DEFAULT (OPTION_MASK_ISA_64BIT | OPTION_MASK_ABI_64)
 #define TARGET_BI_ARCH 1
+#if defined(__linux__)
+#ifndef inhibit_libc
+#include <sys/syscall.h>
+#include <sys/personality.h>
+#define TARGET_32BIT_PERSONALITY \
+               ((syscall(SYS_personality, 0xffffffff) & PER_MASK) == PER_LINUX32)
+#endif
+#endif
--- gcc-6.2.0/gcc/opts-common.c.linux32~	2016-06-30 16:39:10.000000000 +0200
+++ gcc-6.2.0/gcc/opts-common.c	2016-08-23 11:46:51.668445295 +0200
@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.
 #include "system.h"
 #include "intl.h"
 #include "coretypes.h"
+#include "tm.h"
 #include "opts.h"
 #include "options.h"
 #include "diagnostic.h"
@@ -802,6 +803,10 @@ decode_cmdline_options_to_array (unsigne
   unsigned int n, i;
   struct cl_decoded_option *opt_array;
   unsigned int num_decoded_options;
+#ifdef TARGET_32BIT_PERSONALITY
+  bool arch_flag = false;
+  bool arch_32bit = TARGET_32BIT_PERSONALITY;
+#endif
 
   opt_array = XNEWVEC (struct cl_decoded_option, argc);
 
@@ -831,11 +836,33 @@ decode_cmdline_options_to_array (unsigne
 	  continue;
 	}
 
+#ifdef TARGET_32BIT_PERSONALITY
+      if (!arch_flag && arch_32bit
+          && opt[1] == 'm' && ((opt[2] == '3' && opt[3] == '2')
+          || (opt[2] == '6' && opt[3] == '4'))
+          && opt[4] == '\0')
+        arch_flag = true;
+#endif
       n = decode_cmdline_option (argv + i, lang_mask,
 				 &opt_array[num_decoded_options]);
       num_decoded_options++;
     }
 
+#ifdef TARGET_32BIT_PERSONALITY
+  if (!arch_flag && arch_32bit)
+    {
+      char const **argvec = XNEWVEC (char const *, 2);
+      argvec[0] = "-m32";
+      argvec[1] = NULL;
+      if (++num_decoded_options > argc)
+        opt_array = XRESIZEVEC (struct cl_decoded_option,
+                                opt_array, num_decoded_options);
+      (void)decode_cmdline_option (argvec, lang_mask,
+                                   &opt_array[num_decoded_options - 1]);
+      free (argvec);
+    }
+#endif
+
   *decoded_options = opt_array;
   *decoded_options_count = num_decoded_options;
   prune_options (decoded_options, decoded_options_count);
